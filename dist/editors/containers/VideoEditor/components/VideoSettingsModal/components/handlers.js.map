{"version":3,"file":"handlers.js","names":["handleIndexEvent","exports","_ref","handler","transform","index","val","handleIndexTransformEvent","_ref2","local","setter","onValue","e","target","value","onChecked","checked","onEvent"],"sources":["../../../../../../../src/editors/containers/VideoEditor/components/VideoSettingsModal/components/handlers.js"],"sourcesContent":["/**\n * handleIndexEvent({ handler, transform })\n * return a method that takes an index and returns an event handler of the given type\n * that calls a transform with the given index and the incoming value.\n * @param {func} handler - event handler (onValue, onChecked, etc)\n * @param {func} transform - transform method taking an index and a new value\n * @return {func} - event handler creator for index-tied values\n */\nexport const handleIndexEvent = ({ handler, transform }) => (index) => (\n  handler(val => transform(index, val))\n);\n\n/**\n * handleIndexTransformEvent({ handler, setter, local, transform })\n * return a method that takes an index and returns an event handler of the given type\n * that calls a transform with the given index and the incoming value.\n * @param {func} handler - event handler (onValue, onChecked, etc)\n * @param {string|number|object} local - local hook values\n * @param {func} setter - method that updates models based on event\n * @param {func} transform - transform method taking an index and a new value\n * @return {func} - event handler creator for index-tied values with separate setter and transforms\n */\nexport const handleIndexTransformEvent = ({\n  handler,\n  local,\n  setter,\n  transform,\n}) => (index) => (\n  handler(val => setter(transform(local, index, val)))\n);\n\n/**\n * onValue(handler)\n * returns an event handler that calls the given method with the event target value\n * Intended for most basic input types.\n * @param {func} handler - callback to receive the event value\n * @return - event handler that calls passed handler with event.target.value\n */\nexport const onValue = (handler) => (e) => handler(e.target.value);\n\n/**\n * onValue(handler)\n * returns an event handler that calls the given method with the event target value\n * Intended for checkbox input types.\n * @param {func} handler - callback to receive the event value\n * @return - event handler that calls passed handler with event.target.checked\n */\nexport const onChecked = (handler) => (e) => handler(e.target.checked);\n\n/**\n * onEvent(handler)\n * returns an event handler that calls the given method with the event\n * Intended for most basic input types.\n * @param {func} handler - callback to receive the event value\n * @return - event handler that calls passed handler with event\n */\nexport const onEvent = (handler) => (e) => handler(e);\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,gBAAgB,GAAAC,OAAA,CAAAD,gBAAA,GAAG,SAAnBA,gBAAgBA,CAAAE,IAAA;EAAA,IAAMC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IAAEC,SAAS,GAAAF,IAAA,CAATE,SAAS;EAAA,OAAO,UAACC,KAAK;IAAA,OAChEF,OAAO,CAAC,UAAAG,GAAG;MAAA,OAAIF,SAAS,CAACC,KAAK,EAAEC,GAAG,CAAC;IAAA,EAAC;EAAA,CACtC;AAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,yBAAyB,GAAAN,OAAA,CAAAM,yBAAA,GAAG,SAA5BA,yBAAyBA,CAAAC,KAAA;EAAA,IACpCL,OAAO,GAAAK,KAAA,CAAPL,OAAO;IACPM,KAAK,GAAAD,KAAA,CAALC,KAAK;IACLC,MAAM,GAAAF,KAAA,CAANE,MAAM;IACNN,SAAS,GAAAI,KAAA,CAATJ,SAAS;EAAA,OACL,UAACC,KAAK;IAAA,OACVF,OAAO,CAAC,UAAAG,GAAG;MAAA,OAAII,MAAM,CAACN,SAAS,CAACK,KAAK,EAAEJ,KAAK,EAAEC,GAAG,CAAC,CAAC;IAAA,EAAC;EAAA,CACrD;AAAA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMK,OAAO,GAAAV,OAAA,CAAAU,OAAA,GAAG,SAAVA,OAAOA,CAAIR,OAAO;EAAA,OAAK,UAACS,CAAC;IAAA,OAAKT,OAAO,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAAA;AAAA;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,SAAS,GAAAd,OAAA,CAAAc,SAAA,GAAG,SAAZA,SAASA,CAAIZ,OAAO;EAAA,OAAK,UAACS,CAAC;IAAA,OAAKT,OAAO,CAACS,CAAC,CAACC,MAAM,CAACG,OAAO,CAAC;EAAA;AAAA;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,OAAO,GAAAhB,OAAA,CAAAgB,OAAA,GAAG,SAAVA,OAAOA,CAAId,OAAO;EAAA,OAAK,UAACS,CAAC;IAAA,OAAKT,OAAO,CAACS,CAAC,CAAC;EAAA;AAAA"}