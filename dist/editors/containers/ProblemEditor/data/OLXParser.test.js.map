{"version":3,"file":"OLXParser.test.js","names":["_OLXParser","require","_olxTestData","_problem","describe","test","olxparser","OLXParser","checkboxesOLXWithFeedbackAndHintsOLX","rawOLX","problemType","getProblemType","expect","toBe","ProblemTypeKeys","MULTISELECT","numericInputWithFeedbackAndHintsOLX","NUMERIC","dropdownOLXWithFeedbackAndHintsOLX","DROPDOWN","multipleChoiceWithFeedbackAndHintsOLX","SINGLESELECT","textInputWithFeedbackAndHintsOLX","TEXTINPUT","advancedProblemOlX","ADVANCED","multipleProblemOlX","multipleProblemTwoOlX","multipleProblemThreeOlX","blankProblemOLX","labelDescriptionQuestionOLX","getParsedOLXData","e","toBeInstanceOf","Error","message","hints","getHints","toEqual","multipleChoiceWithoutAnswers","answer","parseMultipleChoiceAnswers","data","shuffleProblemOLX","parseStringResponse","textInputWithFeedbackAndHintsOLXWithMultipleAnswers","parseNumericResponse","question","parseQuestions","scriptProblemOlX","toThrow","blankQuestionOLX","styledQuestionOLX","_getCheckboxesOLXWith","getCheckboxesOLXWithFeedbackAndHintsOLX","explanation","getSolutionExplanation","expected","solutionExplanation","replace"],"sources":["../../../../../src/editors/containers/ProblemEditor/data/OLXParser.test.js"],"sourcesContent":["import { OLXParser } from './OLXParser';\nimport {\n  checkboxesOLXWithFeedbackAndHintsOLX,\n  getCheckboxesOLXWithFeedbackAndHintsOLX,\n  dropdownOLXWithFeedbackAndHintsOLX,\n  numericInputWithFeedbackAndHintsOLX,\n  textInputWithFeedbackAndHintsOLX,\n  multipleChoiceWithoutAnswers,\n  multipleChoiceWithFeedbackAndHintsOLX,\n  textInputWithFeedbackAndHintsOLXWithMultipleAnswers,\n  advancedProblemOlX,\n  multipleProblemOlX,\n  multipleProblemTwoOlX,\n  multipleProblemThreeOlX,\n  blankProblemOLX,\n  blankQuestionOLX,\n  styledQuestionOLX,\n  shuffleProblemOLX,\n  scriptProblemOlX,\n  labelDescriptionQuestionOLX,\n} from './mockData/olxTestData';\nimport { ProblemTypeKeys } from '../../../data/constants/problem';\n\ndescribe('Check OLXParser problem type', () => {\n  test('Test checkbox with feedback and hints problem type', () => {\n    const olxparser = new OLXParser(checkboxesOLXWithFeedbackAndHintsOLX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    expect(problemType).toBe(ProblemTypeKeys.MULTISELECT);\n  });\n  test('Test numeric problem type', () => {\n    const olxparser = new OLXParser(numericInputWithFeedbackAndHintsOLX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    expect(problemType).toBe(ProblemTypeKeys.NUMERIC);\n  });\n  test('Test dropdown with feedback and hints problem type', () => {\n    const olxparser = new OLXParser(dropdownOLXWithFeedbackAndHintsOLX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    expect(problemType).toBe(ProblemTypeKeys.DROPDOWN);\n  });\n  test('Test multiple choice with feedback and hints problem type', () => {\n    const olxparser = new OLXParser(multipleChoiceWithFeedbackAndHintsOLX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    expect(problemType).toBe(ProblemTypeKeys.SINGLESELECT);\n  });\n  test('Test textual problem type', () => {\n    const olxparser = new OLXParser(textInputWithFeedbackAndHintsOLX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    expect(problemType).toBe(ProblemTypeKeys.TEXTINPUT);\n  });\n  test('Test Advanced Problem Type', () => {\n    const olxparser = new OLXParser(advancedProblemOlX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    expect(problemType).toBe(ProblemTypeKeys.ADVANCED);\n  });\n  test('Test Advanced Problem Type by multiples', () => {\n    const olxparser = new OLXParser(multipleProblemOlX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    expect(problemType).toBe(ProblemTypeKeys.ADVANCED);\n  });\n  test('Test Advanced Problem Type by multiples, second example', () => {\n    const olxparser = new OLXParser(multipleProblemTwoOlX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    expect(problemType).toBe(ProblemTypeKeys.ADVANCED);\n  });\n  test('Test Advanced Problem Type by multiples, third example', () => {\n    const olxparser = new OLXParser(multipleProblemThreeOlX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    expect(problemType).toBe(ProblemTypeKeys.ADVANCED);\n  });\n  test('Test Blank Problem Type', () => {\n    const olxparser = new OLXParser(blankProblemOLX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    expect(problemType).toBe(null);\n  });\n});\n\ndescribe('OLX Parser settings attributes on problem tags', () => {\n  test('OLX with attributes on the problem tags should error out', () => {\n    const olxparser = new OLXParser(labelDescriptionQuestionOLX.rawOLX);\n    try {\n      olxparser.getParsedOLXData();\n    } catch (e) {\n      expect(e).toBeInstanceOf(Error);\n      expect(e.message).toBe('Misc Attributes asscoiated with problem, opening in advanced editor');\n    }\n  });\n});\n\ndescribe('Check OLXParser hints', () => {\n  test('Test checkbox hints', () => {\n    const olxparser = new OLXParser(checkboxesOLXWithFeedbackAndHintsOLX.rawOLX);\n    const hints = olxparser.getHints();\n    expect(hints).toEqual(checkboxesOLXWithFeedbackAndHintsOLX.hints);\n  });\n  test('Test numeric hints', () => {\n    const olxparser = new OLXParser(numericInputWithFeedbackAndHintsOLX.rawOLX);\n    const hints = olxparser.getHints();\n    expect(hints).toEqual(numericInputWithFeedbackAndHintsOLX.hints);\n  });\n  test('Test dropdown with feedback and hints problem type', () => {\n    const olxparser = new OLXParser(dropdownOLXWithFeedbackAndHintsOLX.rawOLX);\n    const hints = olxparser.getHints();\n    expect(hints).toEqual(dropdownOLXWithFeedbackAndHintsOLX.hints);\n  });\n  test('Test multiple choice with feedback and hints problem type', () => {\n    const olxparser = new OLXParser(multipleChoiceWithFeedbackAndHintsOLX.rawOLX);\n    const hints = olxparser.getHints();\n    expect(hints).toEqual(multipleChoiceWithFeedbackAndHintsOLX.hints);\n  });\n  test('Test textual problem type', () => {\n    const olxparser = new OLXParser(textInputWithFeedbackAndHintsOLX.rawOLX);\n    const hints = olxparser.getHints();\n    expect(hints).toEqual(textInputWithFeedbackAndHintsOLX.hints);\n  });\n});\n\ndescribe('Check OLXParser for answer parsing', () => {\n  test('Test check single select with empty answers', () => {\n    const olxparser = new OLXParser(multipleChoiceWithoutAnswers.rawOLX);\n    const answer = olxparser.parseMultipleChoiceAnswers('multiplechoiceresponse', 'choicegroup', 'choice');\n    expect(answer).toEqual(multipleChoiceWithoutAnswers.data);\n  });\n  test('Test checkbox answer', () => {\n    const olxparser = new OLXParser(checkboxesOLXWithFeedbackAndHintsOLX.rawOLX);\n    const answer = olxparser.parseMultipleChoiceAnswers('choiceresponse', 'checkboxgroup', 'choice');\n    expect(answer).toEqual(checkboxesOLXWithFeedbackAndHintsOLX.data);\n  });\n\n  test('Test checkbox answer', () => {\n    const olxparser = new OLXParser(checkboxesOLXWithFeedbackAndHintsOLX.rawOLX);\n    const answer = olxparser.parseMultipleChoiceAnswers('choiceresponse', 'checkboxgroup', 'choice');\n    expect(answer).toEqual(checkboxesOLXWithFeedbackAndHintsOLX.data);\n  });\n\n  test('Test checkboxs with extraneous tags error out', () => {\n    const olxparser = new OLXParser(shuffleProblemOLX.rawOLX);\n    try {\n      olxparser.parseMultipleChoiceAnswers('choiceresponse', 'checkboxgroup', 'choice');\n    } catch (e) {\n      expect(e).toBeInstanceOf(Error);\n      expect(e.message).toBe('Misc Tags, reverting to Advanced Editor');\n    }\n  });\n\n  test('Test dropdown answer', () => {\n    const olxparser = new OLXParser(dropdownOLXWithFeedbackAndHintsOLX.rawOLX);\n    const answer = olxparser.parseMultipleChoiceAnswers('optionresponse', 'optioninput', 'option');\n    expect(answer).toEqual(dropdownOLXWithFeedbackAndHintsOLX.data);\n  });\n  test('Test multiple choice single select', () => {\n    const olxparser = new OLXParser(multipleChoiceWithFeedbackAndHintsOLX.rawOLX);\n    const answer = olxparser.parseMultipleChoiceAnswers('multiplechoiceresponse', 'choicegroup', 'choice');\n    expect(answer).toEqual(multipleChoiceWithFeedbackAndHintsOLX.data);\n  });\n  test('Test string response answers', () => {\n    const olxparser = new OLXParser(textInputWithFeedbackAndHintsOLX.rawOLX);\n    const answer = olxparser.parseStringResponse();\n    expect(answer).toEqual(textInputWithFeedbackAndHintsOLX.data);\n  });\n  test('Test string response answers with multiple answers', () => {\n    const olxparser = new OLXParser(textInputWithFeedbackAndHintsOLXWithMultipleAnswers.rawOLX);\n    const answer = olxparser.parseStringResponse();\n    expect(answer).toEqual(textInputWithFeedbackAndHintsOLXWithMultipleAnswers.data);\n  });\n  test('Test numerical response answers', () => {\n    const olxparser = new OLXParser(numericInputWithFeedbackAndHintsOLX.rawOLX);\n    const answer = olxparser.parseNumericResponse();\n    expect(answer).toEqual(numericInputWithFeedbackAndHintsOLX.data);\n  });\n});\n\ndescribe('Check OLXParser for question parsing', () => {\n  test('Test checkbox question', () => {\n    const olxparser = new OLXParser(checkboxesOLXWithFeedbackAndHintsOLX.rawOLX);\n    const question = olxparser.parseQuestions('choiceresponse');\n    expect(question).toEqual(checkboxesOLXWithFeedbackAndHintsOLX.question);\n  });\n  test('Test dropdown question', () => {\n    const olxparser = new OLXParser(dropdownOLXWithFeedbackAndHintsOLX.rawOLX);\n    const question = olxparser.parseQuestions('optionresponse');\n    expect(question).toEqual(dropdownOLXWithFeedbackAndHintsOLX.question);\n  });\n  test('Test multiple choice single select question', () => {\n    const olxparser = new OLXParser(multipleChoiceWithFeedbackAndHintsOLX.rawOLX);\n    const question = olxparser.parseQuestions('multiplechoiceresponse');\n    expect(question).toEqual(multipleChoiceWithFeedbackAndHintsOLX.question);\n  });\n  test('Test string response question', () => {\n    const olxparser = new OLXParser(textInputWithFeedbackAndHintsOLX.rawOLX);\n    const question = olxparser.parseQuestions('stringresponse');\n    expect(question).toEqual(textInputWithFeedbackAndHintsOLX.question);\n  });\n  test('Test numerical response question', () => {\n    const olxparser = new OLXParser(numericInputWithFeedbackAndHintsOLX.rawOLX);\n    const question = olxparser.parseQuestions('numericalresponse');\n    expect(question).toEqual(numericInputWithFeedbackAndHintsOLX.question);\n  });\n  test('Test Advanced Problem Type by script tag', () => {\n    const olxparser = new OLXParser(scriptProblemOlX.rawOLX);\n    expect(() => olxparser.parseQuestions('numericalresponse')).toThrow(new Error('Script Tag, reverting to Advanced Editor'));\n  });\n  test('Test OLX with no question content should have empty string for question', () => {\n    const olxparser = new OLXParser(blankQuestionOLX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    const question = olxparser.parseQuestions(problemType);\n    expect(question).toBe(blankQuestionOLX.question);\n  });\n  test('Test OLX question content with styling should parse/build with correct styling', () => {\n    const olxparser = new OLXParser(styledQuestionOLX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    const question = olxparser.parseQuestions(problemType);\n    expect(question).toBe(styledQuestionOLX.question);\n  });\n  test('Test OLX content with labels and descriptions inside reponse tag should parse correctly, appending the label/description to the question', () => {\n    const olxparser = new OLXParser(labelDescriptionQuestionOLX.rawOLX);\n    const problemType = olxparser.getProblemType();\n    const question = olxparser.parseQuestions(problemType);\n    expect(question).toBe(labelDescriptionQuestionOLX.question);\n  });\n});\n\ndescribe('OLXParser for problem with solution tag', () => {\n  describe('for checkbox questions', () => {\n    test('should parse text in p tags', () => {\n      const { rawOLX } = getCheckboxesOLXWithFeedbackAndHintsOLX();\n      const olxparser = new OLXParser(rawOLX);\n      const problemType = olxparser.getProblemType();\n      const explanation = olxparser.getSolutionExplanation(problemType);\n      const expected = getCheckboxesOLXWithFeedbackAndHintsOLX().solutionExplanation;\n      expect(explanation.replace(/\\s/g, '')).toBe(expected.replace(/\\s/g, ''));\n    });\n  });\n});\n"],"mappings":"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"}