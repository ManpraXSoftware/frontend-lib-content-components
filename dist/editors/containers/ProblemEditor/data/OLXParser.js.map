{"version":3,"file":"OLXParser.js","names":["_fastXmlParser","require","_lodashEs","_interopRequireDefault","_problem","obj","__esModule","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","prototype","arg","_toPrimitive","_typeof","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","Number","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_i","iterator","_s","_e","_x","_r","_arr","_n","_d","next","done","err","Array","isArray","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","o","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","from","test","iter","len","arr2","indexToLetterMap","exports","map","val","fromCharCode","nonQuestionKeys","responseKeys","stripNonTextTags","_ref","tag","stripedTags","entries","_ref2","_ref3","OLXParser","olxString","problem","questionData","questionOptions","ignoreAttributes","alwaysCreateTextNode","preserveOrder","parserOptions","builderOptions","questionParser","XMLParser","parser","builder","XMLBuilder","parsedOLX","parse","parsedQuestionOLX","_","has","parseMultipleChoiceAnswers","problemType","widgetName","option","_this","answers","data","widget","get","concat","permissableTags","some","includes","Error","choice","isComplexAnswer","ProblemTypeKeys","SINGLESELECT","MULTISELECT","isEmpty","id","title","correct","element","index","answerTitle","build","eval","toLowerCase","feedback","getAnswerFeedback","groupFeedbackList","getGroupedFeedback","hintKey","_this2","feedbackKeys","answerFeedback","choices","_this3","groupFeedback","groupFeedbackArray","compoundhint","parsedFeedback","split","parseStringResponse","_this4","stringresponse","additionalStringAttributes","getFeedback","selectedFeedback","additionalAnswer","newAnswer","stringEqualHint","type","textline","size","parseNumericResponse","_this5","numericalresponse","responseParam","defaultValue","isAnswerRange","parseQuestions","options","problemArray","questionArray","tagName","subTag","subTagName","questionString","replace","getHints","_this6","hintsObject","hintValue","getSolutionExplanation","solution","wrapper","parsedSolution","div","_ref4","_ref5","indexOf","shift","solutionString","xmlElement","feedbackString","getProblemType","problemKeys","problemTypeKeys","values","ADVANCED","getGeneralFeedback","_ref6","DROPDOWN","_answers$find","firstIncorrectAnswerText","find","answer","isAllIncorrectSelectedFeedbackTheSame","every","getParsedOLXData","answersObject","additionalAttributes","hints","question","solutionExplanation","TEXTINPUT","NUMERIC","settings","generalFeedback","_answersObject","toleranceValue","tolerance","parseInt"],"sources":["../../../../../src/editors/containers/ProblemEditor/data/OLXParser.js"],"sourcesContent":["// Parse OLX to JavaScript objects.\n/* eslint no-eval: 0 */\n\nimport { XMLParser, XMLBuilder } from 'fast-xml-parser';\nimport _ from 'lodash-es';\nimport { ProblemTypeKeys } from '../../../data/constants/problem';\n\nexport const indexToLetterMap = [...Array(26)].map((val, i) => String.fromCharCode(i + 65));\n\nexport const nonQuestionKeys = [\n  '@_answer',\n  '@_type',\n  'additional_answer',\n  'checkboxgroup',\n  'choicegroup',\n  'choiceresponse',\n  'correcthint',\n  'demandhint',\n  'formulaequationinput',\n  'multiplechoiceresponse',\n  'numericalresponse',\n  'optioninput',\n  'optionresponse',\n  'responseparam',\n  'solution',\n  'stringequalhint',\n  'stringresponse',\n  'textline',\n];\n\nexport const responseKeys = [\n  'multiplechoiceresponse',\n  'numericalresponse',\n  'optionresponse',\n  'stringresponse',\n  'choiceresponse',\n  'multiplechoiceresponse',\n  'truefalseresponse',\n  'optionresponse',\n  'numericalresponse',\n  'stringresponse',\n  'customresponse',\n  'symbolicresponse',\n  'coderesponse',\n  'externalresponse',\n  'formularesponse',\n  'schematicresponse',\n  'imageresponse',\n  'annotationresponse',\n  'choicetextresponse',\n];\n\nexport const stripNonTextTags = ({ input, tag }) => {\n  const stripedTags = {};\n  Object.entries(input).forEach(([key, value]) => {\n    if (key !== tag) {\n      stripedTags[key] = value;\n    }\n  });\n  return stripedTags;\n};\n\nexport class OLXParser {\n  constructor(olxString) {\n    this.problem = {};\n    this.questionData = {};\n    const questionOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n      preserveOrder: true,\n    };\n    const parserOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n    };\n    const builderOptions = {\n      ignoreAttributes: false,\n    };\n    // There are two versions of the parsed XLM because the question requires the order of the\n    // parsed data to be preserved. However, all the other widgets need the data grouped by\n    // the wrapping tag.\n    const questionParser = new XMLParser(questionOptions);\n    const parser = new XMLParser(parserOptions);\n    this.builder = new XMLBuilder(builderOptions);\n    this.parsedOLX = parser.parse(olxString);\n    this.parsedQuestionOLX = questionParser.parse(olxString);\n    if (_.has(this.parsedOLX, 'problem')) {\n      this.problem = this.parsedOLX.problem;\n      this.questionData = this.parsedQuestionOLX[0].problem;\n    }\n  }\n\n  parseMultipleChoiceAnswers(problemType, widgetName, option) {\n    const answers = [];\n    let data = {};\n    const widget = _.get(this.problem, `${problemType}.${widgetName}`);\n    const permissableTags = ['choice', '@_type', 'compoundhint', 'option', '#text'];\n    if (_.keys(widget).some((tag) => !permissableTags.includes(tag))) {\n      throw new Error('Misc Tags, reverting to Advanced Editor');\n    }\n    const choice = _.get(widget, option);\n    const isComplexAnswer = [ProblemTypeKeys.SINGLESELECT, ProblemTypeKeys.MULTISELECT].includes(problemType);\n    if (_.isEmpty(choice)) {\n      answers.push(\n        {\n          id: indexToLetterMap[answers.length],\n          title: '',\n          correct: true,\n        },\n      );\n    } else if (_.isArray(choice)) {\n      choice.forEach((element, index) => {\n        let title = element['#text'];\n        if (isComplexAnswer) {\n          const answerTitle = stripNonTextTags({ input: element, tag: `${option}hint` });\n          title = this.builder.build(answerTitle);\n        }\n        const correct = eval(element['@_correct'].toLowerCase());\n        const id = indexToLetterMap[index];\n        const feedback = this.getAnswerFeedback(element, `${option}hint`);\n        answers.push(\n          {\n            id,\n            correct,\n            title,\n            ...feedback,\n          },\n        );\n      });\n    } else {\n      let title = choice['#text'];\n      if (isComplexAnswer) {\n        const answerTitle = stripNonTextTags({ input: choice, tag: `${option}hint` });\n        title = this.builder.build(answerTitle);\n      }\n      const feedback = this.getAnswerFeedback(choice, `${option}hint`);\n      answers.push({\n        correct: eval(choice['@_correct'].toLowerCase()),\n        id: indexToLetterMap[answers.length],\n        title,\n        ...feedback,\n      });\n    }\n    data = { answers };\n    const groupFeedbackList = this.getGroupedFeedback(widget);\n    if (groupFeedbackList.length) {\n      data = {\n        ...data,\n        groupFeedbackList,\n      };\n    }\n    return data;\n  }\n\n  getAnswerFeedback(choice, hintKey) {\n    let feedback = {};\n    let feedbackKeys = 'selectedFeedback';\n    if (_.has(choice, hintKey)) {\n      const answerFeedback = choice[hintKey];\n      if (_.isArray(answerFeedback)) {\n        answerFeedback.forEach((element) => {\n          if (_.has(element, '@_selected')) {\n            feedbackKeys = eval(element['@_selected'].toLowerCase()) ? 'selectedFeedback' : 'unselectedFeedback';\n          }\n          feedback = {\n            ...feedback,\n            [feedbackKeys]: this.builder.build(element),\n          };\n        });\n      } else {\n        if (_.has(answerFeedback, '@_selected')) {\n          feedbackKeys = eval(answerFeedback['@_selected'].toLowerCase()) ? 'selectedFeedback' : 'unselectedFeedback';\n        }\n        feedback = {\n          [feedbackKeys]: this.builder.build(answerFeedback),\n        };\n      }\n    }\n    return feedback;\n  }\n\n  getGroupedFeedback(choices) {\n    const groupFeedback = [];\n    if (_.has(choices, 'compoundhint')) {\n      const groupFeedbackArray = choices.compoundhint;\n      if (_.isArray(groupFeedbackArray)) {\n        groupFeedbackArray.forEach((element) => {\n          const parsedFeedback = stripNonTextTags({ input: element, tag: '@_value' });\n          groupFeedback.push({\n            id: groupFeedback.length,\n            answers: element['@_value'].split(' '),\n            feedback: this.builder.build(parsedFeedback),\n          });\n        });\n      } else {\n        const parsedFeedback = stripNonTextTags({ input: groupFeedbackArray, tag: '@_value' });\n        groupFeedback.push({\n          id: groupFeedback.length,\n          answers: groupFeedbackArray['@_value'].split(' '),\n          feedback: this.builder.build(parsedFeedback),\n        });\n      }\n    }\n    return groupFeedback;\n  }\n\n  parseStringResponse() {\n    const { stringresponse } = this.problem;\n    const answers = [];\n    let answerFeedback = '';\n    let additionalStringAttributes = {};\n    let data = {};\n    const feedback = this.getFeedback(stringresponse);\n    answers.push({\n      id: indexToLetterMap[answers.length],\n      title: stringresponse['@_answer'],\n      correct: true,\n      selectedFeedback: feedback,\n    });\n\n    // Parsing additional_answer for string response.\n    const additionalAnswer = _.get(stringresponse, 'additional_answer', []);\n    if (_.isArray(additionalAnswer)) {\n      additionalAnswer.forEach((newAnswer) => {\n        answerFeedback = this.getFeedback(newAnswer);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: true,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      answerFeedback = this.getFeedback(additionalAnswer);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: additionalAnswer['@_answer'],\n        correct: true,\n        selectedFeedback: answerFeedback,\n      });\n    }\n\n    // Parsing stringequalhint for string response.\n    const stringEqualHint = _.get(stringresponse, 'stringequalhint', []);\n    if (_.isArray(stringEqualHint)) {\n      stringEqualHint.forEach((newAnswer) => {\n        const parsedFeedback = stripNonTextTags({ input: newAnswer, tag: '@_answer' });\n        answerFeedback = this.builder.build(parsedFeedback);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: false,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      const parsedFeedback = stripNonTextTags({ input: stringEqualHint, tag: '@_answer' });\n      answerFeedback = this.builder.build(parsedFeedback);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: stringEqualHint['@_answer'],\n        correct: false,\n        selectedFeedback: answerFeedback,\n      });\n    }\n\n    // TODO: Support multiple types.\n    additionalStringAttributes = {\n      type: _.get(stringresponse, '@_type'),\n      textline: {\n        size: _.get(stringresponse, 'textline.@_size'),\n      },\n    };\n\n    data = {\n      answers,\n      additionalStringAttributes,\n    };\n\n    return data;\n  }\n\n  parseNumericResponse() {\n    const { numericalresponse } = this.problem;\n    let answerFeedback = '';\n    const answers = [];\n    let responseParam = {};\n    const feedback = this.getFeedback(numericalresponse);\n    if (_.has(numericalresponse, 'responseparam')) {\n      const type = _.get(numericalresponse, 'responseparam.@_type');\n      const defaultValue = _.get(numericalresponse, 'responseparam.@_default');\n      responseParam = {\n        [type]: defaultValue,\n      };\n    }\n    const isAnswerRange = /[([]\\d*,\\d*[)\\]]/gm.test(numericalresponse['@_answer']);\n    answers.push({\n      id: indexToLetterMap[answers.length],\n      title: numericalresponse['@_answer'],\n      correct: true,\n      selectedFeedback: feedback,\n      isAnswerRange,\n      ...responseParam,\n    });\n\n    // Parsing additional_answer for numerical response.\n    const additionalAnswer = _.get(numericalresponse, 'additional_answer', []);\n    if (_.isArray(additionalAnswer)) {\n      additionalAnswer.forEach((newAnswer) => {\n        answerFeedback = this.getFeedback(newAnswer);\n        answers.push({\n          id: indexToLetterMap[answers.length],\n          title: newAnswer['@_answer'],\n          correct: true,\n          selectedFeedback: answerFeedback,\n        });\n      });\n    } else {\n      answerFeedback = this.getFeedback(additionalAnswer);\n      answers.push({\n        id: indexToLetterMap[answers.length],\n        title: additionalAnswer['@_answer'],\n        correct: true,\n        selectedFeedback: answerFeedback,\n        isAnswerRange: false,\n      });\n    }\n    return { answers };\n  }\n\n  parseQuestions(problemType) {\n    const options = {\n      ignoreAttributes: false,\n      preserveOrder: true,\n    };\n    const builder = new XMLBuilder(options);\n    const problemArray = _.get(this.questionData[0], problemType) || this.questionData;\n\n    const questionArray = [];\n    problemArray.forEach(tag => {\n      const tagName = Object.keys(tag)[0];\n      if (!nonQuestionKeys.includes(tagName)) {\n        if (tagName === 'script') {\n          throw new Error('Script Tag, reverting to Advanced Editor');\n        }\n        questionArray.push(tag);\n      } else if (responseKeys.includes(tagName)) {\n        /* <label> and <description> tags often are both valid olx as siblings or children of response type tags.\n         They, however, do belong in the question, so we append them to the question.\n        */\n        tag[tagName].forEach(subTag => {\n          const subTagName = Object.keys(subTag)[0];\n          if (subTagName === 'label' || subTagName === 'description') {\n            questionArray.push(subTag);\n          }\n        });\n      }\n    });\n    const questionString = builder.build(questionArray);\n    return questionString.replace(/<description>/gm, '<em>').replace(/<\\/description>/gm, '</em>');\n  }\n\n  getHints() {\n    const hintsObject = [];\n    if (_.has(this.problem, 'demandhint.hint')) {\n      const hint = _.get(this.problem, 'demandhint.hint');\n      if (_.isArray(hint)) {\n        hint.forEach(element => {\n          const hintValue = this.builder.build(element);\n          hintsObject.push({\n            id: hintsObject.length,\n            value: hintValue,\n          });\n        });\n      } else {\n        const hintValue = this.builder.build(hint);\n        hintsObject.push({\n          id: hintsObject.length,\n          value: hintValue,\n        });\n      }\n    }\n    return hintsObject;\n  }\n\n  getSolutionExplanation(problemType) {\n    if (!_.has(this.problem, `${problemType}.solution`) && !_.has(this.problem, 'solution')) { return null; }\n    let solution = _.get(this.problem, `${problemType}.solution`, null) || _.get(this.problem, 'solution', null);\n    const wrapper = Object.keys(solution)[0];\n    if (Object.keys(solution).length === 1 && wrapper === 'div') {\n      const parsedSolution = {};\n      Object.entries(solution.div).forEach(([key, value]) => {\n        if (key.indexOf('@_' === -1)) {\n          // The redundant \"explanation\" title should be removed.\n          if ((key === 'p' || key === 'h2') && (value['#text'] === 'Explanation' || value[0]['#text'] === 'Explanation')) {\n            if (_.isArray(value)) {\n              value.shift();\n              parsedSolution[key] = value;\n            }\n          } else {\n            parsedSolution[key] = value;\n          }\n        }\n      });\n      solution = parsedSolution;\n    }\n    const solutionString = this.builder.build(solution);\n    return solutionString;\n  }\n\n  getFeedback(xmlElement) {\n    if (!_.has(xmlElement, 'correcthint')) { return ''; }\n    const feedback = _.get(xmlElement, 'correcthint');\n    const feedbackString = this.builder.build(feedback);\n    return feedbackString;\n  }\n\n  getProblemType() {\n    const problemKeys = Object.keys(this.problem);\n    const problemTypeKeys = problemKeys.filter(key => Object.values(ProblemTypeKeys).indexOf(key) !== -1);\n    if (problemTypeKeys.length === 0) {\n      // a blank problem is a problem which contains only `<problem></problem>` as it's olx.\n      // blank problems are not given types, so that a type may be selected.\n      if (problemKeys.length === 1 && problemKeys[0] === '#text' && this.problem[problemKeys[0]] === '') {\n        return null;\n      }\n      // if we have no matching problem type, the problem is advanced.\n      return ProblemTypeKeys.ADVANCED;\n    }\n    // make sure compound problems are treated as advanced\n    if ((problemTypeKeys.length > 1)\n      || (_.isArray(this.problem[problemTypeKeys[0]])\n        && this.problem[problemTypeKeys[0]].length > 1)) {\n      return ProblemTypeKeys.ADVANCED;\n    }\n    const problemType = problemTypeKeys[0];\n    return problemType;\n  }\n\n  getGeneralFeedback({ answers, problemType }) {\n    /* Feedback is Generalized for a Problem IFF:\n    1. The problem is of Types: Single Select or Dropdown.\n    2. All the problem's incorrect, if Selected answers are equivalent strings, and there is no other feedback.\n    */\n    if (problemType === ProblemTypeKeys.SINGLESELECT || problemType === ProblemTypeKeys.DROPDOWN) {\n      const firstIncorrectAnswerText = answers.find(answer => answer.correct === false)?.selectedFeedback;\n      const isAllIncorrectSelectedFeedbackTheSame = answers.every(answer => (answer.correct\n        ? true\n        : answer?.selectedFeedback === firstIncorrectAnswerText\n      ));\n      if (isAllIncorrectSelectedFeedbackTheSame) {\n        return firstIncorrectAnswerText;\n      }\n    }\n    return '';\n  }\n\n  getParsedOLXData() {\n    if (_.isEmpty(this.problem)) {\n      return {};\n    }\n\n    if (Object.keys(this.problem).some((key) => key.indexOf('@_') !== -1)) {\n      throw new Error('Misc Attributes asscoiated with problem, opening in advanced editor');\n    }\n\n    let answersObject = {};\n    let additionalAttributes = {};\n    let groupFeedbackList = [];\n    const problemType = this.getProblemType();\n    const hints = this.getHints();\n    const question = this.parseQuestions(problemType);\n    const solutionExplanation = this.getSolutionExplanation(problemType);\n\n    switch (problemType) {\n      case ProblemTypeKeys.DROPDOWN:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.DROPDOWN, 'optioninput', 'option');\n        break;\n      case ProblemTypeKeys.TEXTINPUT:\n        answersObject = this.parseStringResponse();\n        break;\n      case ProblemTypeKeys.NUMERIC:\n        answersObject = this.parseNumericResponse();\n        break;\n      case ProblemTypeKeys.MULTISELECT:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.MULTISELECT, 'checkboxgroup', 'choice');\n        break;\n      case ProblemTypeKeys.SINGLESELECT:\n        answersObject = this.parseMultipleChoiceAnswers(ProblemTypeKeys.SINGLESELECT, 'choicegroup', 'choice');\n        break;\n      case ProblemTypeKeys.ADVANCED:\n        return {\n          problemType,\n          settings: {},\n        };\n      default:\n        // if problem is unset, return null\n        return {};\n    }\n    const generalFeedback = this.getGeneralFeedback({ answers: answersObject.answers, problemType });\n    if (_.has(answersObject, 'additionalStringAttributes')) {\n      additionalAttributes = { ...answersObject.additionalStringAttributes };\n    }\n\n    if (_.has(answersObject, 'groupFeedbackList')) {\n      groupFeedbackList = answersObject.groupFeedbackList;\n    }\n    const { answers } = answersObject;\n    const settings = { hints };\n    if (ProblemTypeKeys.NUMERIC === problemType && _.has(answers[0], 'tolerance')) {\n      const toleranceValue = answers[0].tolerance;\n      if (!toleranceValue || toleranceValue.length === 0) {\n        settings.tolerance = { value: null, type: 'None' };\n      } else if (toleranceValue.includes('%')) {\n        settings.tolerance = { value: parseInt(toleranceValue.slice(0, -1)), type: 'Percent' };\n      } else {\n        settings.tolerance = { value: parseInt(toleranceValue), type: 'Number' };\n      }\n    }\n    if (solutionExplanation) { settings.solutionExplanation = solutionExplanation; }\n\n    return {\n      question,\n      settings,\n      answers,\n      problemType,\n      additionalAttributes,\n      generalFeedback,\n      groupFeedbackList,\n    };\n  }\n}\n"],"mappings":"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"}