{"version":3,"file":"ReactStateOLXParser.js","names":["_lodashEs","_interopRequireDefault","require","_fastXmlParser","_problem","_constants","obj","__esModule","_typeof","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","_i","_s","_e","_x","_r","_arr","_n","_d","call","next","Object","done","push","value","length","err","Array","isArray","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","o","minLen","_arrayLikeToArray","n","toString","slice","name","from","test","iter","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","ReactStateOLXParser","problemState","parserOptions","ignoreAttributes","alwaysCreateTextNode","questionParserOptions","preserveOrder","questionBuilderOptions","attributeNamePrefix","suppressBooleanAttributes","format","builderOptions","questionParser","XMLParser","parser","builder","XMLBuilder","questionBuilder","editorObject","problem","addHints","_this","hintsArray","hints","parsedHint","parse","demandhint","addSolution","solution","solutionTitle","parsedSolution","paragraphs","p","withWrapper","_","concat","solutionObject","div","addMultiSelectAnswers","option","_this$editorObject","_this2","choice","compoundhint","widget","_this$problemState","answers","problemType","answerTitles","_this$editorObject2","selectedFeedback","unselectedFeedback","answer","feedback","singleAnswer","title","id","currentSelectedFeedback","currentUnselectedFeedback","isEmpty","_Object$keys","_title$Text","ProblemTypeKeys","MULTISELECT","parsedSelectedFeedback","parsedUnselectedFeedback","correct","has","addGroupFeedbackList","groupFeedbackList","element","join","addQuestion","question","questionObject","buildMultiSelectProblem","widgetObject","problemObject","build","questionString","problemTypeTag","_problem$match","match","_problem$match2","DROPDOWN","_problem$match3","_problem$match4","SINGLESELECT","_problem$match5","_problem$match6","updatedString","problemString","replace","buildTextInput","answerObject","buildTextInputAnswersFeedback","TEXTINPUT","_problem$match7","_problem$match8","_this3","additionAnswers","wrongAnswers","firstCorrectAnswerParsed","correcthint","getAnswerHints","hasAttributeWithValue","wronghint","additional_answer","stringequalhint","get","textline","buildNumericInput","buildNumericalResponse","NUMERIC","_problem$match9","_problem$match10","_this4","tolerance","settings","additionalAnswers","startsWith","parsedRange","split","_parsedRange","rawLowerBound","rawUpperBound","lowerBoundInt","lowerBoundFraction","upperBoundInt","upperBoundFraction","includes","_lowerBoundFraction$s","_lowerBoundFraction$s2","numerator","denominator","lowerBoundFloat","_upperBoundFraction$s","_upperBoundFraction$s2","upperBoundFloat","lowerBoundChar","upperBoundChar","responseParam","responseparam","type","ToleranceTypes","number","formulaequationinput","parsedFeedback","attr","trim","buildOLX","_default","exports"],"sources":["../../../../../src/editors/containers/ProblemEditor/data/ReactStateOLXParser.js"],"sourcesContent":["import _ from 'lodash-es';\nimport { XMLParser, XMLBuilder } from 'fast-xml-parser';\nimport { ProblemTypeKeys } from '../../../data/constants/problem';\nimport { ToleranceTypes } from '../components/EditProblemView/SettingsWidget/settingsComponents/Tolerance/constants';\n\nclass ReactStateOLXParser {\n  constructor(problemState) {\n    const parserOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n    };\n    const questionParserOptions = {\n      ignoreAttributes: false,\n      alwaysCreateTextNode: true,\n      preserveOrder: true,\n    };\n    const questionBuilderOptions = {\n      ignoreAttributes: false,\n      attributeNamePrefix: '@_',\n      suppressBooleanAttributes: false,\n      format: true,\n      preserveOrder: true,\n    };\n    const builderOptions = {\n      ignoreAttributes: false,\n      attributeNamePrefix: '@_',\n      suppressBooleanAttributes: false,\n      format: true,\n    };\n    this.questionParser = new XMLParser(questionParserOptions);\n    this.parser = new XMLParser(parserOptions);\n    this.builder = new XMLBuilder(builderOptions);\n    this.questionBuilder = new XMLBuilder(questionBuilderOptions);\n    this.editorObject = problemState.editorObject;\n    this.problemState = problemState.problem;\n  }\n\n  addHints() {\n    const hintsArray = [];\n    const { hints } = this.editorObject;\n    if (hints.length < 1) {\n      return {};\n    }\n    hints.forEach(hint => {\n      if (hint.length > 0) {\n        const parsedHint = this.parser.parse(hint);\n        hintsArray.push({\n          ...parsedHint,\n        });\n      }\n    });\n    const demandhint = {\n      demandhint: {\n        hint: hintsArray,\n      },\n    };\n    return demandhint;\n  }\n\n  addSolution() {\n    const { solution } = this.editorObject;\n    if (!solution || solution.length <= 0) { return {}; }\n    const solutionTitle = { '#text': 'Explanation' };\n    const parsedSolution = this.parser.parse(solution);\n    const paragraphs = parsedSolution.p;\n    const withWrapper = _.isArray(paragraphs) ? [solutionTitle, ...paragraphs] : [solutionTitle, paragraphs];\n    const solutionObject = {\n      solution: {\n        div: {\n          '@_class': 'detailed-solution',\n          p: withWrapper,\n        },\n      },\n    };\n    return solutionObject;\n  }\n\n  addMultiSelectAnswers(option) {\n    const choice = [];\n    let compoundhint = [];\n    let widget = {};\n    // eslint-disable-next-line prefer-const\n    let { answers, problemType } = this.problemState;\n    const answerTitles = this.editorObject?.answers;\n    const { selectedFeedback, unselectedFeedback } = this.editorObject;\n    /* todo */\n    /*\n      * the logic for general  feedback is ot current being used.\n      * when component is updated will need to return to this code.\n      * general feedback replaces selected feedback if all incorrect selected feedback is the same.\n      * ******************************************\n    if (generalFeedback !== ''\n    && answers.every(\n      answer => (\n        answer.correct\n          ? true\n          : answer?.selectedFeedback === answers.find(a => a.correct === false).selectedFeedback\n      ),\n    )) {\n      answers = answers.map(answer => (!answer?.correct\n        ? { ...answer, selectedFeedback: generalFeedback }\n        : answer));\n    }\n    */\n    answers.forEach((answer) => {\n      const feedback = [];\n      let singleAnswer = {};\n      const title = answerTitles ? this.parser.parse(answerTitles[answer.id]) : { '#text': answer.title };\n      const currentSelectedFeedback = selectedFeedback?.[answer.id] || null;\n      const currentUnselectedFeedback = unselectedFeedback?.[answer.id] || null;\n      let isEmpty;\n      if (answerTitles) {\n        isEmpty = Object.keys(title)?.length <= 0;\n      } else {\n        isEmpty = title['#text']?.length <= 0;\n      }\n      if (title && !isEmpty) {\n        if (currentSelectedFeedback && problemType === ProblemTypeKeys.MULTISELECT) {\n          const parsedSelectedFeedback = this.parser.parse(currentSelectedFeedback);\n          feedback.push({\n            ...parsedSelectedFeedback,\n            '@_selected': true,\n          });\n        }\n        if (currentSelectedFeedback && problemType !== ProblemTypeKeys.MULTISELECT) {\n          const parsedSelectedFeedback = this.parser.parse(currentSelectedFeedback);\n          feedback.push({\n            ...parsedSelectedFeedback,\n          });\n        }\n        if (currentUnselectedFeedback && problemType === ProblemTypeKeys.MULTISELECT) {\n          const parsedUnselectedFeedback = this.parser.parse(currentUnselectedFeedback);\n          feedback.push({\n            ...parsedUnselectedFeedback,\n            '@_selected': false,\n          });\n        }\n        if (feedback.length) {\n          singleAnswer[`${option}hint`] = feedback;\n        }\n        singleAnswer = {\n          '@_correct': answer.correct,\n          ...title,\n          ...singleAnswer,\n        };\n        choice.push(singleAnswer);\n      }\n    });\n    widget = { [option]: choice };\n    if (_.has(this.problemState, 'groupFeedbackList') && problemType === ProblemTypeKeys.MULTISELECT) {\n      compoundhint = this.addGroupFeedbackList();\n      widget = {\n        ...widget,\n        compoundhint,\n      };\n    }\n    return widget;\n  }\n\n  addGroupFeedbackList() {\n    const compoundhint = [];\n    const { groupFeedbackList } = this.problemState;\n    groupFeedbackList.forEach((element) => {\n      compoundhint.push({\n        '#text': element.feedback,\n        '@_value': element.answers.join(' '),\n      });\n    });\n    return compoundhint;\n  }\n\n  addQuestion() {\n    const { question } = this.editorObject;\n    const questionObject = this.questionParser.parse(question);\n    return questionObject;\n  }\n\n  buildMultiSelectProblem(problemType, widget, option) {\n    const question = this.addQuestion();\n    const widgetObject = this.addMultiSelectAnswers(option);\n    const demandhint = this.addHints();\n    const solution = this.addSolution();\n\n    const problemObject = {\n      problem: {\n        [problemType]: {\n          [widget]: widgetObject,\n          ...solution,\n        },\n        ...demandhint,\n      },\n    };\n\n    const problem = this.builder.build(problemObject);\n    const questionString = this.questionBuilder.build(question);\n    let problemTypeTag;\n    switch (problemType) {\n      case ProblemTypeKeys.MULTISELECT:\n        [problemTypeTag] = problem.match(/<choiceresponse>|<choiceresponse.[^>]+>/);\n        break;\n      case ProblemTypeKeys.DROPDOWN:\n        [problemTypeTag] = problem.match(/<optionresponse>|<optionresponse.[^>]+>/);\n        break;\n      case ProblemTypeKeys.SINGLESELECT:\n        [problemTypeTag] = problem.match(/<multiplechoiceresponse>|<multiplechoiceresponse.[^>]+>/);\n        break;\n      default:\n        break;\n    }\n    const updatedString = `${problemTypeTag}\\n${questionString}`;\n    const problemString = problem.replace(problemTypeTag, updatedString);\n\n    return problemString;\n  }\n\n  buildTextInput() {\n    const question = this.addQuestion();\n    const demandhint = this.addHints();\n    const answerObject = this.buildTextInputAnswersFeedback();\n    const solution = this.addSolution();\n\n    const problemObject = {\n      problem: {\n        [ProblemTypeKeys.TEXTINPUT]: {\n          ...answerObject,\n          ...solution,\n        },\n        ...demandhint,\n      },\n    };\n\n    const problem = this.builder.build(problemObject);\n    const questionString = this.questionBuilder.build(question);\n    const [problemTypeTag] = problem.match(/<stringresponse>|<stringresponse.[^>]+>/);\n    const updatedString = `${problemTypeTag}\\n${questionString}`;\n    const problemString = problem.replace(problemTypeTag, updatedString);\n\n    return problemString;\n  }\n\n  buildTextInputAnswersFeedback() {\n    const { answers } = this.problemState;\n    const { selectedFeedback } = this.editorObject;\n    let answerObject = {};\n    const additionAnswers = [];\n    const wrongAnswers = [];\n    let firstCorrectAnswerParsed = false;\n    answers.forEach((answer) => {\n      const correcthint = this.getAnswerHints(selectedFeedback?.[answer.id]);\n      if (this.hasAttributeWithValue(answer, 'title')) {\n        if (answer.correct && firstCorrectAnswerParsed) {\n          additionAnswers.push({\n            '@_answer': answer.title,\n            ...correcthint,\n          });\n        } else if (answer.correct && !firstCorrectAnswerParsed) {\n          firstCorrectAnswerParsed = true;\n          answerObject = {\n            '@_answer': answer.title,\n            ...correcthint,\n          };\n        } else if (!answer.correct) {\n          const wronghint = correcthint.correcthint;\n          wrongAnswers.push({\n            '@_answer': answer.title,\n            ...wronghint,\n          });\n        }\n      }\n    });\n    answerObject = {\n      ...answerObject,\n      additional_answer: additionAnswers,\n      stringequalhint: wrongAnswers,\n      '@_type': _.get(this.problemState, 'additionalAttributes.type', 'ci'),\n      textline: {\n        '@_size': _.get(this.problemState, 'additionalAttributes.textline.size', 20),\n      },\n    };\n    return answerObject;\n  }\n\n  buildNumericInput() {\n    const question = this.addQuestion();\n    const demandhint = this.addHints();\n    const answerObject = this.buildNumericalResponse();\n    const solution = this.addSolution();\n\n    const problemObject = {\n      problem: {\n        [ProblemTypeKeys.NUMERIC]: {\n          ...answerObject,\n          ...solution,\n        },\n        ...demandhint,\n      },\n    };\n\n    const problem = this.builder.build(problemObject);\n    const questionString = this.questionBuilder.build(question);\n    const [problemTypeTag] = problem.match(/<numericalresponse>|<numericalresponse.[^>]+>/);\n    const updatedString = `${questionString}\\n${problemTypeTag}`;\n    const problemString = problem.replace(problemTypeTag, updatedString);\n\n    return problemString;\n  }\n\n  buildNumericalResponse() {\n    const { answers } = this.problemState;\n    const { tolerance } = this.problemState.settings;\n    const { selectedFeedback } = this.editorObject;\n    let answerObject = {};\n    const additionalAnswers = [];\n    let firstCorrectAnswerParsed = false;\n    answers.forEach((answer) => {\n      const correcthint = this.getAnswerHints(selectedFeedback?.[answer.id]);\n      if (this.hasAttributeWithValue(answer, 'title')) {\n        let { title } = answer;\n        if (title.startsWith('(') || title.startsWith('[')) {\n          const parsedRange = title.split(',');\n          const [rawLowerBound, rawUpperBound] = parsedRange;\n          let lowerBoundInt;\n          let lowerBoundFraction;\n          let upperBoundInt;\n          let upperBoundFraction;\n          if (rawLowerBound.includes('/')) {\n            lowerBoundFraction = rawLowerBound.replace(/[^0-9-/]/gm, '');\n            const [numerator, denominator] = lowerBoundFraction.split('/');\n            const lowerBoundFloat = Number(numerator) / Number(denominator);\n            lowerBoundInt = lowerBoundFloat;\n          } else {\n            // these regex replaces remove everything that is not a decimal or positive/negative numer\n            lowerBoundInt = Number(rawLowerBound.replace(/[^0-9-.]/gm, ''));\n          }\n          if (rawUpperBound.includes('/')) {\n            upperBoundFraction = rawUpperBound.replace(/[^0-9-/]/gm, '');\n            const [numerator, denominator] = upperBoundFraction.split('/');\n            const upperBoundFloat = Number(numerator) / Number(denominator);\n            upperBoundInt = upperBoundFloat;\n          } else {\n            // these regex replaces remove everything that is not a decimal or positive/negative numer\n            upperBoundInt = Number(rawUpperBound.replace(/[^0-9-.]/gm, ''));\n          }\n          if (lowerBoundInt > upperBoundInt) {\n            const lowerBoundChar = rawUpperBound[rawUpperBound.length - 1] === ']' ? '[' : '(';\n            const upperBoundChar = rawLowerBound[0] === '[' ? ']' : ')';\n            if (lowerBoundFraction) {\n              lowerBoundInt = lowerBoundFraction;\n            }\n            if (upperBoundFraction) {\n              upperBoundInt = upperBoundFraction;\n            }\n            title = `${lowerBoundChar}${upperBoundInt},${lowerBoundInt}${upperBoundChar}`;\n          }\n        }\n        if (answer.correct && !firstCorrectAnswerParsed) {\n          firstCorrectAnswerParsed = true;\n          let responseParam = {};\n          if (tolerance?.value) {\n            responseParam = {\n              responseparam: {\n                '@_type': 'tolerance',\n                '@_default': `${tolerance.value}${tolerance.type === ToleranceTypes.number.type ? '' : '%'}`,\n              },\n            };\n          }\n          answerObject = {\n            '@_answer': title,\n            ...responseParam,\n            ...correcthint,\n          };\n        } else if (answer.correct && firstCorrectAnswerParsed) {\n          additionalAnswers.push({\n            '@_answer': title,\n            ...correcthint,\n          });\n        }\n      }\n    });\n    answerObject = {\n      ...answerObject,\n      additional_answer: additionalAnswers,\n      formulaequationinput: {\n        '#text': '',\n      },\n    };\n    return answerObject;\n  }\n\n  getAnswerHints(feedback) {\n    let correcthint = {};\n    if (feedback !== undefined && feedback !== '') {\n      const parsedFeedback = this.parser.parse(feedback);\n      correcthint = {\n        correcthint: {\n          ...parsedFeedback,\n        },\n      };\n    }\n    return correcthint;\n  }\n\n  hasAttributeWithValue(obj, attr) {\n    return _.has(obj, attr) && _.get(obj, attr, '').toString().trim() !== '';\n  }\n\n  buildOLX() {\n    const { problemType } = this.problemState;\n    let problemString = '';\n\n    switch (problemType) {\n      case ProblemTypeKeys.MULTISELECT:\n        problemString = this.buildMultiSelectProblem(ProblemTypeKeys.MULTISELECT, 'checkboxgroup', 'choice');\n        break;\n      case ProblemTypeKeys.DROPDOWN:\n        problemString = this.buildMultiSelectProblem(ProblemTypeKeys.DROPDOWN, 'optioninput', 'option');\n        break;\n      case ProblemTypeKeys.SINGLESELECT:\n        problemString = this.buildMultiSelectProblem(ProblemTypeKeys.SINGLESELECT, 'choicegroup', 'choice');\n        break;\n      case ProblemTypeKeys.TEXTINPUT:\n        problemString = this.buildTextInput();\n        break;\n      case ProblemTypeKeys.NUMERIC:\n        problemString = this.buildNumericInput();\n        break;\n      default:\n        break;\n    }\n    return problemString;\n  }\n}\n\nexport default ReactStateOLXParser;\n"],"mappings":"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"}