{"version":3,"file":"hooks.js","names":["_react","require","_lodashEs","_interopRequireDefault","_module","_interopRequireWildcard","_messages","_problem","_hooks2","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","TypeError","Number","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","iter","iterator","Array","from","isArray","_arrayLikeToArray","_slicedToArray","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","o","minLen","n","toString","slice","constructor","name","test","len","arr2","_i","_s","_e","_x","_r","_arr","_n","_d","next","done","err","state","exports","showAdvanced","val","useState","cardCollapsed","summary","showAttempts","attemptDisplayValue","showAdvancedSettingsCards","_module$state$showAdv","module","_module$state$showAdv2","isAdvancedCardsVisible","setIsAdvancedCardsVisible","showAdvancedCards","showFullCard","hasExpandableTextArea","_module$state$cardCol","_module$state$cardCol2","isCardCollapsibleOpen","setIsCardCollapsibleOpen","toggleCardCollapse","hintsCardHooks","hints","updateSettings","_module$state$summary","message","messages","noHintSummary","values","_module$state$summary2","setSummary","useEffect","hintsNumber","hintSummary","count","handleAdd","newId","_","isEmpty","Math","max","map","id","modifiedHints","concat","hintsRowHooks","handleChange","handleDelete","matlabCardHooks","matLabApiKey","_module$state$summary3","intl","_module$state$summary4","matlabNoKeySummary","event","resetCardHooks","setReset","showResetButton","setResetTrue","setResetFalse","scoringCardHooks","scoring","defaultValue","loadedAttemptsNumber","attempts","number","_module$state$attempt","_module$state$attempt2","setAttemptDisplayValue","handleUnlimitedChange","isUnlimited","checked","unlimited","handleMaxAttemptChange","unlimitedAttempts","attemptNumber","parseInt","isNaN","attemptNumberStr","replace","handleOnChange","newMaxAttempt","handleWeightChange","weight","parseFloat","useAnswerSettings","showAnswer","_module$state$showAtt","_module$state$showAtt2","setShowAttempts","numberOfAttemptsChoice","ShowAnswerTypesKeys","AFTER_SOME_NUMBER_OF_ATTEMPTS","AFTER_ALL_ATTEMPTS","AFTER_ALL_ATTEMPTS_OR_CORRECT","includes","on","handleShowAnswerChange","handleAttemptsChange","afterAttempts","timerCardHooks","time","timeBetween","typeRowHooks","_ref","answers","blockTitle","correctAnswerCount","problemType","setBlockTitle","typeKey","updateField","updateAnswer","richTextProblems","ProblemTypeKeys","SINGLESELECT","MULTISELECT","clearPreviouslySelectedAnswers","currentAnswerTitles","fetchEditorContent","format","answer","_currentAnswerTitles","title","correct","updateAnswersToCorrect","convertToPlainText","onClick","TEXTINPUT","DROPDOWN","NUMERIC","ProblemTypes","confirmSwitchToAdvancedEditor","_ref2","switchToAdvancedEditor","setConfirmOpen","window","scrollTo","top","behavior"],"sources":["../../../../../../../src/editors/containers/ProblemEditor/components/EditProblemView/SettingsWidget/hooks.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport _ from 'lodash-es';\nimport * as module from './hooks';\nimport messages from './messages';\nimport { ProblemTypeKeys, ProblemTypes, ShowAnswerTypesKeys } from '../../../../../data/constants/problem';\nimport { fetchEditorContent } from '../hooks';\n\nexport const state = {\n  showAdvanced: (val) => useState(val),\n  cardCollapsed: (val) => useState(val),\n  summary: (val) => useState(val),\n  showAttempts: (val) => useState(val),\n  attemptDisplayValue: (val) => useState(val),\n};\n\nexport const showAdvancedSettingsCards = () => {\n  const [isAdvancedCardsVisible, setIsAdvancedCardsVisible] = module.state.showAdvanced(false);\n  return {\n    isAdvancedCardsVisible,\n    showAdvancedCards: () => setIsAdvancedCardsVisible(true),\n  };\n};\n\nexport const showFullCard = (hasExpandableTextArea) => {\n  const [isCardCollapsibleOpen, setIsCardCollapsibleOpen] = module.state.cardCollapsed(hasExpandableTextArea);\n  return {\n    isCardCollapsibleOpen,\n    toggleCardCollapse: () => {\n      if (hasExpandableTextArea) {\n        setIsCardCollapsibleOpen(true);\n      } else {\n        setIsCardCollapsibleOpen(!isCardCollapsibleOpen);\n      }\n    },\n  };\n};\n\nexport const hintsCardHooks = (hints, updateSettings) => {\n  const [summary, setSummary] = module.state.summary({ message: messages.noHintSummary, values: {} });\n\n  useEffect(() => {\n    const hintsNumber = hints.length;\n    if (hintsNumber === 0) {\n      setSummary({ message: messages.noHintSummary, values: {} });\n    } else {\n      setSummary({ message: messages.hintSummary, values: { hint: hints[0].value, count: (hintsNumber - 1) } });\n    }\n  }, [hints]);\n\n  const handleAdd = () => {\n    let newId = 0;\n    if (!_.isEmpty(hints)) {\n      newId = Math.max(...hints.map(hint => hint.id)) + 1;\n    }\n    const hint = { id: newId, value: '' };\n    const modifiedHints = [...hints, hint];\n    updateSettings({ hints: modifiedHints });\n  };\n\n  return {\n    summary,\n    handleAdd,\n  };\n};\n\nexport const hintsRowHooks = (id, hints, updateSettings) => {\n  const handleChange = (value) => {\n    const modifiedHints = hints.map(hint => {\n      if (hint.id === id) {\n        return { ...hint, value };\n      }\n      return hint;\n    });\n    updateSettings({ hints: modifiedHints });\n  };\n\n  const handleDelete = () => {\n    const modifiedHints = hints.filter((hint) => (hint.id !== id));\n    updateSettings({ hints: modifiedHints });\n  };\n\n  return {\n    handleChange,\n    handleDelete,\n  };\n};\n\nexport const matlabCardHooks = (matLabApiKey, updateSettings) => {\n  const [summary, setSummary] = module.state.summary({ message: '', values: {}, intl: false });\n\n  useEffect(() => {\n    if (_.isEmpty(matLabApiKey)) {\n      setSummary({ message: messages.matlabNoKeySummary, values: {}, intl: true });\n    } else {\n      setSummary({ message: matLabApiKey, values: {}, intl: false });\n    }\n  }, [matLabApiKey]);\n\n  const handleChange = (event) => {\n    updateSettings({ matLabApiKey: event.target.value });\n  };\n\n  return {\n    summary,\n    handleChange,\n  };\n};\n\nexport const resetCardHooks = (updateSettings) => {\n  const setReset = (value) => {\n    updateSettings({ showResetButton: value });\n  };\n\n  return {\n    setResetTrue: () => setReset(true),\n    setResetFalse: () => setReset(false),\n  };\n};\n\nexport const scoringCardHooks = (scoring, updateSettings, defaultValue) => {\n  const loadedAttemptsNumber = scoring.attempts.number === defaultValue ? `${scoring.attempts.number} (Default)` : scoring.attempts.number;\n  const [attemptDisplayValue, setAttemptDisplayValue] = module.state.attemptDisplayValue(loadedAttemptsNumber);\n  const handleUnlimitedChange = (event) => {\n    const isUnlimited = event.target.checked;\n    if (isUnlimited) {\n      setAttemptDisplayValue('');\n      updateSettings({ scoring: { ...scoring, attempts: { number: '', unlimited: true } } });\n    } else {\n      setAttemptDisplayValue(`${defaultValue} (Default)`);\n      updateSettings({ scoring: { ...scoring, attempts: { number: defaultValue, unlimited: false } } });\n    }\n  };\n  const handleMaxAttemptChange = (event) => {\n    let unlimitedAttempts = false;\n    let attemptNumber = parseInt(event.target.value);\n    const { value } = event.target;\n    if (_.isNaN(attemptNumber)) {\n      if (value === '') {\n        attemptNumber = defaultValue;\n        setAttemptDisplayValue(`${defaultValue} (Default)`);\n      } else {\n        attemptNumber = '';\n        unlimitedAttempts = true;\n      }\n    } else if (attemptNumber <= 0) {\n      attemptNumber = 0;\n    } else if (attemptNumber === defaultValue) {\n      const attemptNumberStr = value.replace(' (Default)');\n      attemptNumber = parseInt(attemptNumberStr);\n    }\n    updateSettings({ scoring: { ...scoring, attempts: { number: attemptNumber, unlimited: unlimitedAttempts } } });\n  };\n\n  const handleOnChange = (event) => {\n    let newMaxAttempt = parseInt(event.target.value);\n    if (newMaxAttempt === defaultValue) {\n      newMaxAttempt = `${defaultValue} (Default)`;\n    } else if (_.isNaN(newMaxAttempt)) {\n      newMaxAttempt = '';\n    } else if (newMaxAttempt < 0) {\n      newMaxAttempt = 0;\n    }\n    setAttemptDisplayValue(newMaxAttempt);\n  };\n\n  const handleWeightChange = (event) => {\n    let weight = parseFloat(event.target.value);\n    if (_.isNaN(weight)) {\n      weight = 0;\n    }\n    updateSettings({ scoring: { ...scoring, weight } });\n  };\n\n  return {\n    attemptDisplayValue,\n    handleUnlimitedChange,\n    handleMaxAttemptChange,\n    handleOnChange,\n    handleWeightChange,\n  };\n};\n\nexport const useAnswerSettings = (showAnswer, updateSettings) => {\n  const [showAttempts, setShowAttempts] = module.state.showAttempts(false);\n\n  const numberOfAttemptsChoice = [\n    ShowAnswerTypesKeys.AFTER_SOME_NUMBER_OF_ATTEMPTS,\n    ShowAnswerTypesKeys.AFTER_ALL_ATTEMPTS,\n    ShowAnswerTypesKeys.AFTER_ALL_ATTEMPTS_OR_CORRECT,\n  ];\n\n  useEffect(() => {\n    setShowAttempts(_.includes(numberOfAttemptsChoice, showAnswer.on));\n  }, [showAttempts]);\n\n  const handleShowAnswerChange = (event) => {\n    const { value } = event.target;\n    setShowAttempts(_.includes(numberOfAttemptsChoice, value));\n    updateSettings({ showAnswer: { ...showAnswer, on: value } });\n  };\n\n  const handleAttemptsChange = (event) => {\n    let attempts = parseInt(event.target.value);\n    if (_.isNaN(attempts)) {\n      attempts = 0;\n    }\n    updateSettings({ showAnswer: { ...showAnswer, afterAttempts: attempts } });\n  };\n\n  return {\n    handleShowAnswerChange,\n    handleAttemptsChange,\n    showAttempts,\n  };\n};\n\nexport const timerCardHooks = (updateSettings) => ({\n  handleChange: (event) => {\n    let time = parseInt(event.target.value);\n    if (_.isNaN(time)) {\n      time = 0;\n    }\n    updateSettings({ timeBetween: time });\n  },\n});\n\nexport const typeRowHooks = ({\n  answers,\n  blockTitle,\n  correctAnswerCount,\n  problemType,\n  setBlockTitle,\n  typeKey,\n  updateField,\n  updateAnswer,\n}) => {\n  const richTextProblems = [ProblemTypeKeys.SINGLESELECT, ProblemTypeKeys.MULTISELECT];\n\n  const clearPreviouslySelectedAnswers = () => {\n    let currentAnswerTitles;\n    if (richTextProblems.includes(problemType)) {\n      currentAnswerTitles = fetchEditorContent({ format: 'text' }).answers;\n    }\n    answers.forEach(answer => {\n      const title = currentAnswerTitles?.[answer.id] || answer.title;\n      if (answer.correct) {\n        updateAnswer({ ...answer, title, correct: false });\n      } else {\n        updateAnswer({ ...answer, title });\n      }\n    });\n  };\n\n  const updateAnswersToCorrect = () => {\n    let currentAnswerTitles;\n    if (richTextProblems.includes(problemType)) {\n      currentAnswerTitles = fetchEditorContent({ format: 'text' }).answers;\n    }\n    answers.forEach(answer => {\n      const title = currentAnswerTitles ? currentAnswerTitles[answer.id] : answer.title;\n      updateAnswer({ ...answer, title, correct: true });\n    });\n  };\n\n  const convertToPlainText = () => {\n    const currentAnswerTitles = fetchEditorContent({ format: 'text' }).answers;\n    answers.forEach(answer => {\n      updateAnswer({ ...answer, title: currentAnswerTitles[answer.id] });\n    });\n  };\n\n  const onClick = () => {\n    // Numeric, text, and dropdowns cannot render HTML as answer values, so if switching from a single select\n    // or multi-select problem the rich text needs to covert to plain text\n    if (typeKey === ProblemTypeKeys.TEXTINPUT && richTextProblems.includes(problemType)) {\n      convertToPlainText();\n    }\n    // Dropdown problems can only have one correct answer. When there is more than one correct answer\n    // from a previous problem type, the correct attribute for selected answers need to be set to false.\n    if (typeKey === ProblemTypeKeys.DROPDOWN) {\n      if (correctAnswerCount > 1) {\n        clearPreviouslySelectedAnswers();\n      } else if (richTextProblems.includes(problemType)) {\n        convertToPlainText();\n      }\n    }\n    // Numeric input problems can only have correct answers. Switch all answers to correct when switching\n    // to numeric input.\n    if (typeKey === ProblemTypeKeys.NUMERIC) {\n      updateAnswersToCorrect();\n    }\n\n    if (blockTitle === ProblemTypes[problemType].title) {\n      setBlockTitle(ProblemTypes[typeKey].title);\n    }\n    updateField({ problemType: typeKey });\n  };\n  return {\n    onClick,\n  };\n};\n\nexport const confirmSwitchToAdvancedEditor = ({\n  switchToAdvancedEditor,\n  setConfirmOpen,\n}) => {\n  switchToAdvancedEditor();\n  setConfirmOpen(false);\n  window.scrollTo({\n    top: 0,\n    behavior: 'smooth',\n  });\n};\n"],"mappings":"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"}