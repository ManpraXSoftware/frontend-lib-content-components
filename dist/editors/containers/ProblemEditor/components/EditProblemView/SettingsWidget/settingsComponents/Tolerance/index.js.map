{"version":3,"file":"index.js","names":["_react","_interopRequireWildcard","require","_i18n","_paragon","_propTypes","_interopRequireDefault","_SettingsOption","_messages","_constants","_jsxRuntime","obj","__esModule","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Symbol","iterator","constructor","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","TypeError","Number","isAnswerRangeSet","exports","_ref","answers","isAnswerRange","handleToleranceTypeChange","_ref2","updateSettings","tolerance","event","ToleranceTypes","none","type","newTolerance","selectedIndex","handleToleranceValueChange","_ref3","getSummary","_ref4","intl","percent","concat","number","formatMessage","messages","noneToleranceSummary","ToleranceCard","_ref5","summary","useEffect","jsxs","title","toleranceSettingTitle","children","jsx","Alert","varaint","FormattedMessage","toleranceAnswerRangeWarning","className","toleranceSettingText","Form","Group","Control","as","onChange","disabled","map","toleranceType","message","floatingLabel","toleranceValueInputLabel","propTypes","PropTypes","shape","string","oneOfType","any","isRequired","arrayOf","correct","bool","id","selectedFeedback","unselectedFeedback","func","intlShape","_default","injectIntl"],"sources":["../../../../../../../../../src/editors/containers/ProblemEditor/components/EditProblemView/SettingsWidget/settingsComponents/Tolerance/index.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { injectIntl, FormattedMessage, intlShape } from '@edx/frontend-platform/i18n';\nimport { Alert, Form } from '@edx/paragon';\nimport PropTypes from 'prop-types';\nimport SettingsOption from '../../SettingsOption';\nimport messages from './messages';\nimport { ToleranceTypes } from './constants';\n\n// eslint-disable-next-line no-unused-vars\nexport const isAnswerRangeSet = ({ answers }) => !!answers[0].isAnswerRange;\n\nexport const handleToleranceTypeChange = ({ updateSettings, tolerance, answers }) => (event) => {\n  if (!isAnswerRangeSet({ answers })) {\n    let value;\n    if (event.target.value === ToleranceTypes.none.type) {\n      value = null;\n    } else {\n      value = tolerance.value || 0;\n    }\n    const newTolerance = { type: ToleranceTypes[Object.keys(ToleranceTypes)[event.target.selectedIndex]].type, value };\n    updateSettings({ tolerance: newTolerance });\n  }\n};\n\nexport const handleToleranceValueChange = ({ updateSettings, tolerance, answers }) => (event) => {\n  if (!isAnswerRangeSet({ answers })) {\n    const newTolerance = { value: event.target.value, type: tolerance.type };\n    updateSettings({ tolerance: newTolerance });\n  }\n};\n\nexport const getSummary = ({ tolerance, intl }) => {\n  switch (tolerance?.type) {\n    case ToleranceTypes.percent.type:\n      return `± ${tolerance.value}%`;\n    case ToleranceTypes.number.type:\n      return `± ${tolerance.value}`;\n    case ToleranceTypes.none.type:\n      return intl.formatMessage(messages.noneToleranceSummary);\n    default:\n      return intl.formatMessage(messages.noneToleranceSummary);\n  }\n};\n\nexport const ToleranceCard = ({\n  tolerance,\n  answers,\n  updateSettings,\n  // inject\n  intl,\n}) => {\n  const isAnswerRange = isAnswerRangeSet({ answers });\n  let summary = getSummary({ tolerance, intl });\n  useEffect(() => { summary = getSummary({ tolerance, intl }); }, [tolerance]);\n  return (\n    <SettingsOption\n      title={intl.formatMessage(messages.toleranceSettingTitle)}\n      summary={summary}\n      none={tolerance.type === ToleranceTypes.none.type}\n    >\n      { isAnswerRange\n       && (\n       <Alert\n         varaint=\"info\"\n       >\n         <FormattedMessage {...messages.toleranceAnswerRangeWarning} />\n       </Alert>\n       )}\n      <div className=\"halfSpacedMessage\">\n        <span>\n          <FormattedMessage {...messages.toleranceSettingText} />\n        </span>\n      </div>\n      <Form.Group className=\"pb-0 mb-0\">\n        <Form.Control\n          as=\"select\"\n          onChange={handleToleranceTypeChange({ updateSettings, tolerance, answers })}\n          disabled={isAnswerRange}\n          value={tolerance.type}\n        >\n          {Object.keys(ToleranceTypes).map((toleranceType) => (\n            <option\n              key={toleranceType.type}\n              value={toleranceType.type}\n            >\n              {intl.formatMessage(ToleranceTypes[toleranceType].message)}\n            </option>\n          ))}\n        </Form.Control>\n        { tolerance?.type !== ToleranceTypes.none.type && !isAnswerRange\n          && (\n          <Form.Control\n            className=\"mt-4\"\n            type=\"number\"\n            value={tolerance.value}\n            onChange={handleToleranceValueChange({ updateSettings, tolerance, answers })}\n            floatingLabel={intl.formatMessage(messages.toleranceValueInputLabel)}\n          />\n          )}\n      </Form.Group>\n\n    </SettingsOption>\n  );\n};\n\nToleranceCard.propTypes = {\n  tolerance: PropTypes.shape({\n    type: PropTypes.string,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.any]),\n  }).isRequired,\n  answers: PropTypes.arrayOf(PropTypes.shape({\n    correct: PropTypes.bool,\n    id: PropTypes.string,\n    selectedFeedback: PropTypes.string,\n    title: PropTypes.string,\n    unselectedFeedback: PropTypes.string,\n  })).isRequired,\n  updateSettings: PropTypes.func.isRequired,\n  intl: intlShape.isRequired,\n};\n\nexport default injectIntl(ToleranceCard);\n"],"mappings":"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"}