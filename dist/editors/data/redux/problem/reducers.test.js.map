{"version":3,"file":"reducers.test.js","names":["_reducers","require","_problem","_typeof","obj","Symbol","iterator","constructor","prototype","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","toString","call","slice","name","Array","from","test","iter","isArray","len","length","i","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","Number","testingState","initialState","arbitraryField","describe","it","expect","reducer","toEqual","testValue","setterTest","action","concat","actions","map","args","payload","maxAttempts","showanswer","showResetButton","setEnableTypeSelection","settings","scoring","attempts","number","unlimited","showAnswer","on","problemType","answer","id","correct","selectedFeedback","title","isAnswerRange","unselectedFeedback","addAnswer","answers","updateField","hints","updateSettings","numericTestState","ProblemTypeKeys","NUMERIC","correctAnswerCount","answerRange","addAnswerRange","updateAnswer","deleteAnswer"],"sources":["../../../../../src/editors/data/redux/problem/reducers.test.js"],"sourcesContent":["import { initialState, actions, reducer } from './reducers';\nimport { ProblemTypeKeys } from '../../constants/problem';\n\nconst testingState = {\n  ...initialState,\n  arbitraryField: 'arbitrary',\n};\n\ndescribe('problem reducer', () => {\n  it('has initial state', () => {\n    expect(reducer(undefined, {})).toEqual(initialState);\n  });\n\n  const testValue = 'roll for initiative';\n\n  describe('handling actions', () => {\n    const setterTest = (action, target) => {\n      describe(action, () => {\n        it(`load ${target} from payload`, () => {\n          expect(reducer(testingState, actions[action](testValue))).toEqual({\n            ...testingState,\n            [target]: testValue,\n          });\n        });\n      });\n    };\n    [\n      ['updateQuestion', 'question'],\n    ].map(args => setterTest(...args));\n    describe('setEnableTypeSelection', () => {\n      it('sets given problemType to null', () => {\n        const payload = {\n          maxAttempts: 1,\n          showanswer: 'finished',\n          showResetButton: false,\n        };\n        expect(reducer(testingState, actions.setEnableTypeSelection(payload))).toEqual({\n          ...testingState,\n          settings: {\n            ...testingState.settings,\n            scoring: {\n              ...testingState.settings.scoring,\n              attempts: { number: 1, unlimited: false },\n            },\n            showAnswer: { ...testingState.settings.showAnswer, on: payload.showanswer },\n            ...payload.showResetButton,\n          },\n          problemType: null,\n        });\n      });\n    });\n    describe('load', () => {\n      it('sets answers', () => {\n        const answer = {\n          id: 'A',\n          correct: false,\n          selectedFeedback: '',\n          title: '',\n          isAnswerRange: false,\n          unselectedFeedback: '',\n        };\n        expect(reducer(testingState, actions.addAnswer(answer))).toEqual({\n          ...testingState,\n          answers: [answer],\n        });\n      });\n    });\n    describe('updateField', () => {\n      it('sets given parameter', () => {\n        const payload = { problemType: 'soMePRoblEMtYPe' };\n        expect(reducer(testingState, actions.updateField(payload))).toEqual({\n          ...testingState,\n          ...payload,\n        });\n      });\n    });\n    describe('updateSettings', () => {\n      it('sets given settings parameter', () => {\n        const payload = { hints: ['soMehInt'] };\n        expect(reducer(testingState, actions.updateSettings(payload))).toEqual({\n          ...testingState,\n          settings: {\n            ...testingState.settings,\n            ...payload,\n          },\n        });\n      });\n    });\n    describe('addAnswer', () => {\n      const answer = {\n        id: 'A',\n        correct: false,\n        selectedFeedback: '',\n        title: '',\n        isAnswerRange: false,\n        unselectedFeedback: '',\n      };\n      it('sets answers', () => {\n        expect(reducer({ ...testingState, problemType: 'choiceresponse' }, actions.addAnswer())).toEqual({\n          ...testingState,\n          problemType: 'choiceresponse',\n          answers: [answer],\n        });\n      });\n      it('sets answers for numeric input', () => {\n        const numericTestState = {\n          ...testingState,\n          problemType: ProblemTypeKeys.NUMERIC,\n          correctAnswerCount: 0,\n        };\n        expect(reducer(numericTestState, actions.addAnswer())).toEqual({\n          ...numericTestState,\n          correctAnswerCount: 1,\n          answers: [{\n            ...answer,\n            correct: true,\n          }],\n        });\n      });\n    });\n\n    describe('addAnswerRange', () => {\n      const answerRange = {\n        id: 'A',\n        correct: true,\n        selectedFeedback: '',\n        title: '',\n        isAnswerRange: true,\n        unselectedFeedback: '',\n      };\n      it('sets answerRange', () => {\n        expect(reducer({ ...testingState, problemType: ProblemTypeKeys.NUMERIC }, actions.addAnswerRange())).toEqual({\n          ...testingState,\n          correctAnswerCount: 1,\n          problemType: ProblemTypeKeys.NUMERIC,\n          answers: [answerRange],\n        });\n      });\n    });\n\n    describe('updateAnswer', () => {\n      it('sets answers, as well as setting the correctAnswerCount ', () => {\n        const answer = { id: 'A', correct: true };\n        expect(reducer(\n          {\n            ...testingState,\n            answers: [{\n              id: 'A',\n              correct: false,\n            }],\n          },\n          actions.updateAnswer(answer),\n        )).toEqual({\n          ...testingState,\n          correctAnswerCount: 1,\n          answers: [{ id: 'A', correct: true }],\n        });\n      });\n    });\n    describe('deleteAnswer', () => {\n      it('sets answers, as well as setting the correctAnswerCount ', () => {\n        const answer = { id: 'A', correct: false };\n        expect(reducer(\n          {\n            ...testingState,\n            correctAnswerCount: 1,\n            answers: [{\n              id: 'A',\n              correct: false,\n            },\n            {\n              id: 'B',\n              correct: true,\n            }],\n          },\n          actions.deleteAnswer(answer),\n        )).toEqual({\n          ...testingState,\n          correctAnswerCount: 1,\n          answers: [\n            {\n              id: 'A',\n              correct: true,\n            }],\n        });\n      });\n      it('if you delete an answer range, it will be replaced with a blank answer', () => {\n        const answer = {\n          id: 'A',\n          correct: true,\n          selectedFeedback: '',\n          title: '',\n          isAnswerRange: false,\n          unselectedFeedback: '',\n        };\n        const answerRange = {\n          id: 'A',\n          correct: false,\n          selectedFeedback: '',\n          title: '',\n          isAnswerRange: true,\n          unselectedFeedback: '',\n        };\n\n        expect(reducer(\n          {\n            ...testingState,\n            problemType: ProblemTypeKeys.NUMERIC,\n            correctAnswerCount: 1,\n            answers: [{ ...answerRange }],\n          },\n          actions.deleteAnswer(answer),\n        )).toEqual({\n          ...testingState,\n          problemType: ProblemTypeKeys.NUMERIC,\n          correctAnswerCount: 1,\n          answers: [{ ...answer }],\n        });\n      });\n    });\n  });\n});\n"],"mappings":"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"}